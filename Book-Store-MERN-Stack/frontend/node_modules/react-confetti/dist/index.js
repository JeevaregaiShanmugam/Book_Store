import React from 'react';
import * as tweens from 'tween-functions';

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e, _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function () {
    return !!t;
  })();
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

function degreesToRads(degrees) {
  return degrees * Math.PI / 180;
}
function randomRange(min, max) {
  return min + Math.random() * (max - min);
}
function randomInt(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}

var ParticleShape;
(function (ParticleShape) {
  ParticleShape[ParticleShape["Circle"] = 0] = "Circle";
  ParticleShape[ParticleShape["Square"] = 1] = "Square";
  ParticleShape[ParticleShape["Strip"] = 2] = "Strip";
})(ParticleShape || (ParticleShape = {}));
var RotationDirection;
(function (RotationDirection) {
  RotationDirection[RotationDirection["Positive"] = 1] = "Positive";
  RotationDirection[RotationDirection["Negative"] = -1] = "Negative";
})(RotationDirection || (RotationDirection = {}));
var Particle = /*#__PURE__*/function () {
  function Particle(context, getOptions, x, y) {
    _classCallCheck(this, Particle);
    _defineProperty(this, "context", void 0);
    _defineProperty(this, "radius", void 0);
    _defineProperty(this, "x", void 0);
    _defineProperty(this, "y", void 0);
    _defineProperty(this, "w", void 0);
    _defineProperty(this, "h", void 0);
    _defineProperty(this, "vx", void 0);
    _defineProperty(this, "vy", void 0);
    _defineProperty(this, "shape", void 0);
    _defineProperty(this, "angle", void 0);
    _defineProperty(this, "angularSpin", void 0);
    _defineProperty(this, "color", void 0);
    // Actually used as scaleY to simulate rotation cheaply
    _defineProperty(this, "rotateY", void 0);
    _defineProperty(this, "rotationDirection", void 0);
    _defineProperty(this, "getOptions", void 0);
    this.getOptions = getOptions;
    var _this$getOptions = this.getOptions(),
      colors = _this$getOptions.colors,
      initialVelocityX = _this$getOptions.initialVelocityX,
      initialVelocityY = _this$getOptions.initialVelocityY;
    this.context = context;
    this.x = x;
    this.y = y;
    this.w = randomRange(5, 20);
    this.h = randomRange(5, 20);
    this.radius = randomRange(5, 10);
    this.vx = typeof initialVelocityX === 'number' ? randomRange(-initialVelocityX, initialVelocityX) : randomRange(initialVelocityX.min, initialVelocityX.max);
    this.vy = typeof initialVelocityY === 'number' ? randomRange(-initialVelocityY, 0) : randomRange(initialVelocityY.min, initialVelocityY.max);
    this.shape = randomInt(0, 2);
    this.angle = degreesToRads(randomRange(0, 360));
    this.angularSpin = randomRange(-0.2, 0.2);
    this.color = colors[Math.floor(Math.random() * colors.length)];
    this.rotateY = randomRange(0, 1);
    this.rotationDirection = randomRange(0, 1) ? RotationDirection.Positive : RotationDirection.Negative;
  }
  return _createClass(Particle, [{
    key: "update",
    value: function update() {
      var _this$getOptions2 = this.getOptions(),
        gravity = _this$getOptions2.gravity,
        wind = _this$getOptions2.wind,
        friction = _this$getOptions2.friction,
        opacity = _this$getOptions2.opacity,
        drawShape = _this$getOptions2.drawShape;
      this.x += this.vx;
      this.y += this.vy;
      this.vy += gravity;
      this.vx += wind;
      this.vx *= friction;
      this.vy *= friction;
      if (this.rotateY >= 1 && this.rotationDirection === RotationDirection.Positive) {
        this.rotationDirection = RotationDirection.Negative;
      } else if (this.rotateY <= -1 && this.rotationDirection === RotationDirection.Negative) {
        this.rotationDirection = RotationDirection.Positive;
      }
      var rotateDelta = 0.1 * this.rotationDirection;
      this.rotateY += rotateDelta;
      this.angle += this.angularSpin;
      this.context.save();
      this.context.translate(this.x, this.y);
      this.context.rotate(this.angle);
      this.context.scale(1, this.rotateY);
      this.context.rotate(this.angle);
      this.context.beginPath();
      this.context.fillStyle = this.color;
      this.context.strokeStyle = this.color;
      this.context.globalAlpha = opacity;
      this.context.lineCap = 'round';
      this.context.lineWidth = 2;
      if (drawShape && typeof drawShape === 'function') {
        drawShape.call(this, this.context);
      } else {
        switch (this.shape) {
          case ParticleShape.Circle:
            {
              this.context.beginPath();
              this.context.arc(0, 0, this.radius, 0, 2 * Math.PI);
              this.context.fill();
              break;
            }
          case ParticleShape.Square:
            {
              this.context.fillRect(-this.w / 2, -this.h / 2, this.w, this.h);
              break;
            }
          case ParticleShape.Strip:
            {
              this.context.fillRect(-this.w / 6, -this.h / 2, this.w / 3, this.h);
              break;
            }
        }
      }
      this.context.closePath();
      this.context.restore();
    }
  }]);
}();

var ParticleGenerator = /*#__PURE__*/_createClass(function ParticleGenerator(_canvas, getOptions) {
  var _this = this;
  _classCallCheck(this, ParticleGenerator);
  _defineProperty(this, "canvas", void 0);
  _defineProperty(this, "context", void 0);
  _defineProperty(this, "getOptions", void 0);
  _defineProperty(this, "x", 0);
  _defineProperty(this, "y", 0);
  _defineProperty(this, "w", 0);
  _defineProperty(this, "h", 0);
  _defineProperty(this, "lastNumberOfPieces", 0);
  _defineProperty(this, "tweenInitTime", Date.now());
  _defineProperty(this, "particles", []);
  _defineProperty(this, "particlesGenerated", 0);
  _defineProperty(this, "removeParticleAt", function (i) {
    _this.particles.splice(i, 1);
  });
  _defineProperty(this, "getParticle", function () {
    var newParticleX = randomRange(_this.x, _this.w + _this.x);
    var newParticleY = randomRange(_this.y, _this.h + _this.y);
    return new Particle(_this.context, _this.getOptions, newParticleX, newParticleY);
  });
  _defineProperty(this, "animate", function () {
    var canvas = _this.canvas,
      context = _this.context,
      particlesGenerated = _this.particlesGenerated,
      lastNumberOfPieces = _this.lastNumberOfPieces;
    var _this$getOptions = _this.getOptions(),
      run = _this$getOptions.run,
      recycle = _this$getOptions.recycle,
      numberOfPieces = _this$getOptions.numberOfPieces,
      debug = _this$getOptions.debug,
      tweenFunction = _this$getOptions.tweenFunction,
      tweenDuration = _this$getOptions.tweenDuration;
    if (!run) {
      return false;
    }
    var nP = _this.particles.length;
    var activeCount = recycle ? nP : particlesGenerated;
    var now = Date.now();
    // Initial population
    if (activeCount < numberOfPieces) {
      // Use the numberOfPieces prop as a key to reset the easing timing
      if (lastNumberOfPieces !== numberOfPieces) {
        _this.tweenInitTime = now;
        _this.lastNumberOfPieces = numberOfPieces;
      }
      var tweenInitTime = _this.tweenInitTime;
      // Add more than one piece per loop, otherwise the number of pieces would
      // be limitted by the RAF framerate
      var progressTime = now - tweenInitTime > tweenDuration ? tweenDuration : Math.max(0, now - tweenInitTime);
      var tweenedVal = tweenFunction(progressTime, activeCount, numberOfPieces, tweenDuration);
      var numToAdd = Math.round(tweenedVal - activeCount);
      for (var i = 0; i < numToAdd; i++) {
        _this.particles.push(_this.getParticle());
      }
      _this.particlesGenerated += numToAdd;
    }
    if (debug) {
      // Draw debug text
      context.font = '12px sans-serif';
      context.fillStyle = '#333';
      context.textAlign = 'right';
      context.fillText("Particles: ".concat(nP), canvas.width - 10, canvas.height - 20);
    }
    // Maintain the population
    _this.particles.forEach(function (p, i) {
      // Update each particle's position
      p.update();
      // Prune the off-canvas particles
      if (p.y > canvas.height || p.y < -100 || p.x > canvas.width + 100 || p.x < -100) {
        if (recycle && activeCount <= numberOfPieces) {
          // Replace the particle with a brand new one
          _this.particles[i] = _this.getParticle();
        } else {
          _this.removeParticleAt(i);
        }
      }
    });
    return nP > 0 || activeCount < numberOfPieces;
  });
  this.canvas = _canvas;
  var ctx = this.canvas.getContext('2d');
  if (!ctx) {
    throw new Error('Could not get canvas context');
  }
  this.context = ctx;
  this.getOptions = getOptions;
});

var confettiDefaults = {
  width: typeof window !== 'undefined' ? window.innerWidth : 300,
  height: typeof window !== 'undefined' ? window.innerHeight : 200,
  numberOfPieces: 200,
  friction: 0.99,
  wind: 0,
  gravity: 0.1,
  initialVelocityX: 4,
  initialVelocityY: 10,
  colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722', '#795548'],
  opacity: 1.0,
  debug: false,
  tweenFunction: tweens.easeInOutQuad,
  tweenDuration: 5000,
  recycle: true,
  run: true
};
var Confetti = /*#__PURE__*/function () {
  function Confetti(_canvas, _opts) {
    var _this = this;
    _classCallCheck(this, Confetti);
    _defineProperty(this, "canvas", void 0);
    _defineProperty(this, "context", void 0);
    _defineProperty(this, "_options", void 0);
    _defineProperty(this, "generator", void 0);
    _defineProperty(this, "rafId", void 0);
    _defineProperty(this, "lastFrameTime", Date.now());
    _defineProperty(this, "setOptionsWithDefaults", function (opts) {
      var computedConfettiDefaults = {
        confettiSource: {
          x: 0,
          y: 0,
          w: _this.canvas.width,
          h: 0
        }
      };
      _this._options = _objectSpread2(_objectSpread2(_objectSpread2({}, computedConfettiDefaults), confettiDefaults), opts);
      Object.assign(_this, opts.confettiSource);
    });
    _defineProperty(this, "update", function () {
      var _this$options = _this.options,
        run = _this$options.run,
        onConfettiComplete = _this$options.onConfettiComplete,
        frameRate = _this$options.frameRate,
        canvas = _this.canvas,
        context = _this.context;
      // Throttle the frame rate if set
      if (frameRate) {
        var now = Date.now();
        var elapsed = now - _this.lastFrameTime;
        if (elapsed < 1000 / frameRate) {
          _this.rafId = requestAnimationFrame(_this.update);
          return;
        }
        _this.lastFrameTime = now - elapsed % frameRate;
      }
      if (run) {
        context.fillStyle = 'white';
        context.clearRect(0, 0, canvas.width, canvas.height);
      }
      if (_this.generator.animate()) {
        _this.rafId = requestAnimationFrame(_this.update);
      } else {
        if (onConfettiComplete && typeof onConfettiComplete === 'function' && _this.generator.particlesGenerated > 0) {
          onConfettiComplete.call(_this, _this);
        }
        _this._options.run = false;
      }
    });
    _defineProperty(this, "reset", function () {
      if (_this.generator && _this.generator.particlesGenerated > 0) {
        _this.generator.particlesGenerated = 0;
        _this.generator.particles = [];
        _this.generator.lastNumberOfPieces = 0;
      }
    });
    _defineProperty(this, "stop", function () {
      _this.options = {
        run: false
      };
      if (_this.rafId) {
        cancelAnimationFrame(_this.rafId);
        _this.rafId = undefined;
      }
    });
    this.canvas = _canvas;
    var ctx = this.canvas.getContext('2d');
    if (!ctx) {
      throw new Error('Could not get canvas context');
    }
    this.context = ctx;
    this.generator = new ParticleGenerator(this.canvas, function () {
      return _this.options;
    });
    this.options = _opts;
    this.update();
  }
  return _createClass(Confetti, [{
    key: "options",
    get: function get() {
      return this._options;
    },
    set: function set(opts) {
      var _this$_options, _this$_options2;
      var lastRunState = (_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.run;
      var lastRecycleState = (_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.recycle;
      this.setOptionsWithDefaults(opts);
      if (this.generator) {
        Object.assign(this.generator, this.options.confettiSource);
        if (typeof opts.recycle === 'boolean' && opts.recycle && lastRecycleState === false) {
          this.generator.lastNumberOfPieces = this.generator.particles.length;
        }
      }
      if (typeof opts.run === 'boolean' && opts.run && lastRunState === false) {
        this.update();
      }
    }
  }]);
}();

var ref = /*#__PURE__*/React.createRef();
var ReactConfettiInternal = /*#__PURE__*/function (_React$Component) {
  function ReactConfettiInternal(props) {
    var _this;
    _classCallCheck(this, ReactConfettiInternal);
    _this = _callSuper(this, ReactConfettiInternal, [props]);
    _defineProperty(_this, "canvas", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "confetti", void 0);
    _this.canvas = props.canvasRef || ref;
    return _this;
  }
  _inherits(ReactConfettiInternal, _React$Component);
  return _createClass(ReactConfettiInternal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.canvas.current) {
        var opts = extractCanvasProps(this.props)[0];
        this.confetti = new Confetti(this.canvas.current, opts);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var confettiOptions = extractCanvasProps(this.props)[0];
      if (this.confetti) {
        this.confetti.options = confettiOptions;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.confetti) {
        this.confetti.stop();
      }
      this.confetti = undefined;
    }
  }, {
    key: "render",
    value: function render() {
      var _extractCanvasProps = extractCanvasProps(this.props),
        _extractCanvasProps2 = _slicedToArray(_extractCanvasProps, 2),
        confettiOptions = _extractCanvasProps2[0],
        passedProps = _extractCanvasProps2[1];
      var canvasStyles = _objectSpread2({
        zIndex: 2,
        position: 'absolute',
        pointerEvents: 'none',
        top: 0,
        left: 0,
        bottom: 0,
        right: 0
      }, passedProps.style);
      return /*#__PURE__*/React.createElement("canvas", _extends({
        width: confettiOptions.width,
        height: confettiOptions.height,
        ref: this.canvas
      }, passedProps, {
        style: canvasStyles
      }));
    }
  }]);
}(React.Component);
_defineProperty(ReactConfettiInternal, "defaultProps", _objectSpread2({}, confettiDefaults));
_defineProperty(ReactConfettiInternal, "displayName", 'ReactConfetti');
function extractCanvasProps(props) {
  var confettiOptions = {};
  var refs = {};
  var rest = {};
  var confettiOptionKeys = [].concat(_toConsumableArray(Object.keys(confettiDefaults)), ['confettiSource', 'drawShape', 'onConfettiComplete', 'frameRate']);
  var refProps = ['canvasRef'];
  for (var prop in props) {
    var val = props[prop];
    if (confettiOptionKeys.includes(prop)) {
      confettiOptions[prop] = val;
    } else if (refProps.includes(prop)) {
      refProps[prop] = val;
    } else {
      rest[prop] = val;
    }
  }
  return [confettiOptions, rest, refs];
}
var ReactConfetti = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(ReactConfettiInternal, _extends({
    canvasRef: ref
  }, props));
});

export { ReactConfetti as default };
//# sourceMappingURL=index.js.map
